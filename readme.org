# -*- encoding:utf-8 Mode: POLY-ORG;  -*- --- 
#+Startup: noindent
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:t
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

[[https://travis-ci.com/jingtaozf/literate-elisp][file:https://travis-ci.com/jingtaozf/literate-elisp.svg?branch=master]]

* Table of Contents                                                   :TOC:
- [[#introduction][Introduction]]
- [[#preparation][Preparation]]
  - [[#install-polymode-in-emacs][install Polymode in Emacs]]
  - [[#install-literate-elispel][install literate-elisp.el]]
- [[#load-this-org-file][load this org file]]
- [[#demo-routines][demo routines]]
  - [[#a-demo-macro][a demo macro]]
- [[#a-demo-emacs-configuration][a demo emacs configuration]]
  - [[#a-demo-configuration][a demo configuration]]
  - [[#load-this-org-file-in-emacs][load this org file in .emacs]]
- [[#test-cases][Test cases]]
- [[#copyright-and-license][Copyright and license]]

* Introduction

This is a demo file to show a way how to use [[http://www.literateprogramming.com/][literal programming]] in Emacs lisp.

The implementation details of [[https://github.com/jingtaozf/literate-elisp][literate-elisp]] can be found in file [[./literate-elisp.org]] ([[./literate-elisp.pdf][pdf version]]).

It export an elisp function ~literate-load~ and this function can load elisp codes in all elisp code blocks 
surrounded by ~#+begin_src lisp~ and ~#+end_src~ in an org file directly.
#+BEGIN_EXAMPLE
   ,#+BEGIN_SRC elisp :tangle yes
   (message "this is a test.~%")
   ,#+END_SRC
#+END_EXAMPLE

And if you have defined elisp variables and functions in this org file, you can jump to the position of 
their definitions directly by emacs lisp's source code navigation feature.

This library contains the following files:
- [[./literate-elisp.org]] \\ 
  The implementation and documentation of literate elisp reader.
- [[./literate-elisp.el]] \\
  The tangled codes of literate elisp reader, generated from ~literate-elisp.org~
- [[./literate-elisp.pdf]] \\
  The weaved documentation, generated from ~literate-elisp.org~ by org mode's [[https://orgmode.org/manual/Triggering-publication.html#Triggering-publication][publish feature]].
- [[./readme.org]] \\
  This file contains introduction and demo codes for how to do literate elisp in an org file.
- [[./.travis.yml]] \\
  The config file used by Web service [[https://travis-ci.com/jingtaozf/literate-lisp][travis ci]] to test this library.

* Preparation
** install Polymode in Emacs
The org file should be opened with [[https://polymode.github.io/][polymode]],the following emacs lisp scripts should be added in .emacs
#+BEGIN_SRC elisp :tangle no
(use-package poly-org
    :ensure t)
#+END_SRC
** install literate-elisp.el
#+BEGIN_SRC elisp :tangle no
(load "~/projects/literate-elisp/literate-elisp.el")
#+END_SRC
* load this org file 

This org file can be loaded by elisp function ~literate-load~ directly and all elisp code blocks in this org file
can be loaded directly if such code block is designed to be loaded directly.
#+BEGIN_SRC elisp :tangle no
(literate-load "readme.org")
#+END_SRC
* demo routines
** a demo macro
As a demo org file, we write a simple demo macro ~aif~ here.
#+BEGIN_SRC elisp
(defmacro aif (test then &optional else)
    "Just like IF-BIND but the var is always IT."
    `(if-bind it ,test ,then ,else))
#+END_SRC

You can use it like this
#+BEGIN_SRC elisp :tangle no
(aif (and (y-or-n-p "Try it")
            10)
    (message "it is %s" it))
#+END_SRC
  after loading this org file by function ~literate-load~, you can use macro ~aif~ directly in your other elisp files.

* a demo emacs configuration 
  Of course the one purpose of this library is to write emacs configuration directly in an org file. \\
  For example, I can write elisp configurations directly in this file:
  
** a demo configuration
***  enable org mode for org files
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))  
#+END_SRC
** load this org file in .emacs
Then to load routines and configurations in this org file, I add the following codes in my ~.emacs~
#+BEGIN_SRC elisp :tangle no
(load "~/projects/literate-elisp/literate-elisp.el")
(literate-load "~/projects/literate-elisp/readme.org")
#+END_SRC
* Test cases
a simple function is defined as the entry point for the tests:
#+BEGIN_SRC elisp
(defun litereate-elisp-demo-test ()
  (and (= 10 (aif 10 it 9)))
  (string= "\\.\\(org\\|org_archive\\)$" (loop for (x . y) in auto-mode-alist
                                               if (eq y 'org-mode)
                                                 return x)))
#+END_SRC
Web service [[https://travis-ci.com/jingtaozf/literate-lisp][travis ci]] will load config file [[./.travis.yml]] to run these tests automatically 
every time there is a new git change.
* Copyright and license
Code and documentation copyright 2018-2019 Jingtao Xu.

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the Free Software Foundation,
 either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program.
If not, see http://www.gnu.org/licenses/.
